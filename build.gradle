apply plugin: "scala" 

//Checker Framework Inference - build.gradle
//This script allows you to compile and jar checker-framework-inference along with
//all required rependencies 

//gradle jar will create a NON-standalone jar 
//gradle allJar will create a stand-alone jar providing that all projects upon which
//Checker Framework Inference depends are built

//In this project compileJava depends on compileScala (it's usually the other way around
//in a gradle build).  This means to compile (but not package) checker-framework-inference
//you should run "gradle compileJava"


//Note:  For this setup to work you must follow the instructions outlined in the
//       checker manual Section 25.3 "Building from Source" 
//http://types.cs.washington.edu/checker-framework/current/checkers-manual.html#build-source

//TODO: It seems like, at the moment this script doesn't do a great job of detecting
//      when we do not need to recompile

//TODO: currently there are NO tests for this project, when there are they will need to be
//      added to this script

//Questions: Mail jburke@cs.washington.edu

def env         = System.getenv()
def jsr308Dir   = env["JSR308"]
def checkersDir = env["CHECKERS"]
def javaHome    = env["JAVA_HOME"]

println '===================================='
println '    Checker Framework Inference     '
println '===================================='
println ''
println '-------------------------------'
println 'Important Environment Variables'
println '-------------------------------'
println 'jsr308:    ' + jsr308Dir
println 'checkers:  ' + checkersDir
println 'javaHome:  ' + javaHome

//Closure that creates a file from a base directory and a name of the file in that directory
def fromBaseDir   = { baseDir, child -> new File(baseDir, child)  }

//A function that, given a file name, creates a file object of that name with 
//jsr308Dir as its parent
def jsr308Child   = fromBaseDir.curry(jsr308Dir)   

//A function that, given a file name, creates a file object of that name with 
//checkersDir as its parent
def checkersChild = fromBaseDir.curry(checkersDir) 

def afuDir        = jsr308Child("annotation-tools/annotation-file-utilities")  

//A function that, given a file name, creates a file object of that name with 
//afuDir as its parent
def afuChild      = fromBaseDir.curry(afuDir)

//JarsToPackage contains both all members that should be on the classpath for this build
//and all jars (except for checker-framework-inference.jar) that should be included in
//the jar produced by the allJars command
def jarsToPackage = [ //jsr308 relative paths
					 "plume-lib/java/plume.jar",
					].collect { jsr308Child(it).getAbsolutePath()   } +
					
					[//checker relative paths
					 "tests/junit-4.7.jar",
					 "lib/javaparser.jar",
					 "checkers.jar",
					 "checkers-quals.jar",
					 "binary/jsr308-all.jar"
					].collect { checkersChild(it).getAbsolutePath() } +
					
					[ //Annotation File Utilities paths
					  "annotation-file-utilities.jar" 
					].collect { afuChild(it).getAbsolutePath()      }

//A list of files to append to the class path during compilation
def classpath = files(
				jarsToPackage 													 +
				jsr308Child("checker-framework-inference/bin").getAbsolutePath() +
				
				new File(javaHome, "lib/tools.jar").getAbsolutePath() 			 +
				new File(javaHome, "jre/lib/rt.jar").getAbsolutePath()
			  )
				 
sourceSets {
    main {
        scala { //The Scala command happens first and should exclude java
        		//If the java files are included they will be compiled via the scalac
        		//compiler and NOT the jsr308 compiler
            srcDir "src" 
            exclude "**/*.java"
        }
        
        java {
        	srcDir "src"
            exclude "**/*.scala" //Unnecessary I guess
        }
        
        //Leads to a dir structure of "checker-framework-inference/bin/checkers/...classes...
        output.classesDir "bin"
    	compileClasspath += classpath
    }    
}

buildDir = "bin"

repositories {
    mavenCentral()
}

dependencies {
    // Libraries needed to run the scala tools
    scalaTools 'org.scala-lang:scala-compiler:2.9.2'
    scalaTools 'org.scala-lang:scala-library:2.9.2'
    
    // Libraries needed for scala api
    compile 'org.scala-lang:scala-library:2.9.2'
    compile 'org.scala-lang:scala-compiler:2.9.2'
}

tasks.compileScala {
	description = 'Compiles only the scala classes for this project.  If you\'d like to compile the whole project, use compileJava.'
}

//Switch the Javac used to the JSR308
tasks.compileJava {
  description = 'Compiles both the scala and java files for this project using the checker framework compiler and the scala compiler'
  options.fork = true
  options.compilerArgs = [
      '-implicit:class',
      '-Awarns', '-Xmaxwarns', '10000',
      "-Xbootclasspath/p:$checkersDir/jdk/jdk.jar"]
  options.forkOptions.executable="$checkersDir/binary/javac"
}

//Exclude parts of the build directory that don't include classes from being packaged in
//the jar file.  
// IMPORTANT: If "libs" is packaged in the JAR file you end up with an infinitely 
// recursive jar task that will fill up your hard drive (eventually)
tasks.jar {
    description = 'Makes a jar with ONLY the classes compiled for checker framework inference and NONE of its dependencies'
	exclude("dependency-cache", "libs", "tmp")
}

//Switch the compilation order to compile the Scala classes then the Java classes
tasks.compileScala.taskDependencies.values = compileScala.taskDependencies.values - 'compileJava'  
tasks.compileJava.dependsOn compileScala 

tasks.clean {
	delete += "build/libs/checker-framework-inference.zip"
	delete += "checker-framework-inference-all.jar" 
}

//Create a fileTree consisting of ALL jars that are relevant to checker-inference
def checkerInferenceJar = jsr308Child("checker-framework-inference/bin/libs/checker-framework-inference.jar")
def jars = (jarsToPackage + checkerInferenceJar.getAbsolutePath()).collect { //TODO: Have to handle this better, i.e. handle it locally to translation
	def tree = zipTree(it).matching { exclude 'META-INF' }
}

task allJars(type : Jar) {
    description = 'Creates a jar that includes all of the classes that are compiled for checker framework inference and all of its dependencies except for files found in the scala/java sdks'
	destinationDir projectDir
	archiveName "checker-framework-inference-all.jar"
	from jars
} dependsOn jar